{"version":3,"sources":["components/cell.js","components/grid.js","utils/hslToRgb.js","components/gridCanvas.js","App.js","serviceWorker.js","index.js"],"names":["Cell","Object","classCallCheck","this","currentState","Math","floor","random","total","state","Array2D","width","height","arr","Array","i","Grid","currentBufferIndex","buffer","clear","generation","y","x","setState","backBufferIndex","currentBuffer","backBuffer","countNeighbors","options","arguments","length","undefined","border","neighborCount","north","south","west","east","Error","yOffset","yPos","xOffset","xPos","bind","thisCell","hslToRgb","h","s","l","r","g","b","hue2rgb","p","q","t","round","GridCanvas","props","_this","possibleConstructorReturn","getPrototypeOf","call","grid","buildGrid","getGen","heatmap","stopRequested","buttonText","update","assertThisInitialized","start","startOver","drawGrid","startButtonHandler","stopButtonHandler","resetButtonHandler","heatmapButtonHandler","playbackButtonHandler","requestAnimationFrame","console","log","maxTotal","cells","getCells","ctx","refs","canvas","getContext","imageData","getImageData","cell","index","color","normalized","hue","abs","colors","data","putImageData","nextGen","e","preventDefault","react_default","a","createElement","id","ref","onClick","disabled","Component","App","COLS","ROWS","className","gridCanvas","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAYeA,aAXb,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GACbG,KAAKC,aAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,UACpCJ,KAAKK,MAAQ,uDAGNC,GACPN,KAAKC,aAAeK,EACpBN,KAAKK,OAASC,WCNlB,SAASC,EAAQC,EAAOC,GAGtB,IAFA,IAAIC,EAAM,IAAIC,MAAMF,GAEXG,EAAI,EAAGA,EAAIH,EAAQG,IAC1BF,EAAIE,GAAK,IAAID,MAAMH,GAGrB,OAAOE,MAoKMG,aAhKb,SAAAA,EAAYL,EAAOC,GAASX,OAAAC,EAAA,EAAAD,CAAAE,KAAAa,GAC1Bb,KAAKQ,MAAQA,EACbR,KAAKS,OAASA,EACdT,KAAKc,mBAAqB,EAC1Bd,KAAKe,OAAS,CACZR,EAAQC,EAAOC,GACfF,EAAQC,EAAOC,IAEjBT,KAAKgB,QACLhB,KAAKiB,WAAa,yDAIlB,OAAOjB,KAAKe,OAAOf,KAAKc,qDAIxB,OAAOd,KAAKiB,2CAIZjB,KAAKiB,WAAa,EAElB,IADA,IAAIF,EAASf,KAAKe,OAAOf,KAAKc,oBACrBI,EAAI,EAAGA,EAAIlB,KAAKS,OAAQS,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAInB,KAAKQ,MAAOW,IAC9BJ,EAAOG,GAAGC,GAAK,IAAItB,EACnBkB,EAAOG,GAAGC,GAAGC,SAAS,uCAQ1B,IAFA,IAAIL,EAASf,KAAKe,OAAOf,KAAKc,oBAErBI,EAAI,EAAGA,EAAIlB,KAAKS,OAAQS,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAInB,KAAKQ,MAAOW,IAC9BJ,EAAOG,GAAGC,GAAK,IAAItB,oCAMvB,IAAIwB,EAA8C,IAA5BrB,KAAKc,mBAA2B,EAAG,EACrDQ,EAAgBtB,KAAKe,OAAOf,KAAKc,oBACjCS,EAAavB,KAAKe,OAAOM,GAK7B,SAASG,EAAeL,EAAGD,GAA4B,IAAzBO,EAAyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,CAACG,OAAO,QACxCC,EAAgB,EAEpB,GAAuB,SAAnBL,EAAQI,OAAmB,CAC7B,IAAIE,EAAQb,EAAI,EACZc,EAAQd,EAAI,EACZe,EAAOd,EAAI,EACXe,EAAOf,EAAI,EAIXY,EAAQ,IACVA,EAAQ/B,KAAKS,OAAS,GAGrBuB,IAAUhC,KAAKS,SAChBuB,EAAQ,GAGNC,EAAO,IACTA,EAAOjC,KAAKQ,MAAQ,GAGlB0B,IAASlC,KAAKQ,QAChB0B,EAAO,GAGTJ,EACER,EAAcS,GAAOE,GAAMhC,aAC3BqB,EAAcS,GAAOZ,GAAGlB,aACxBqB,EAAcS,GAAOG,GAAMjC,aAC3BqB,EAAcJ,GAAGe,GAAMhC,aACvBqB,EAAcJ,GAAGgB,GAAMjC,aACvBqB,EAAcU,GAAOC,GAAMhC,aAC3BqB,EAAcU,GAAOb,GAAGlB,aACxBqB,EAAcU,GAAOE,GAAMjC,iBAExB,IAAuB,SAAnBwB,EAAQI,OA4BjB,MAAM,IAAIM,MAAM,wBAA0BV,EAAQI,QA1BlD,IAAK,IAAIO,GAAW,EAAGA,GAAW,EAAGA,IAAW,CAC9C,IAAIC,EAAOnB,EAAIkB,EAEf,KAAIC,EAAO,GAAKA,IAASrC,KAAKS,QAK9B,IAAK,IAAI6B,GAAW,EAAGA,GAAW,EAAGA,IAAW,CAC9C,IAAIC,EAAOpB,EAAImB,EAEXC,EAAO,GAAKA,IAASvC,KAAKQ,QAMd,IAAZ8B,GAA6B,IAAZF,IAIrBN,GAAiBR,EAAce,GAAME,GAAMtC,iBAQjD,OAAO6B,EAKT,IAAK,IAAIZ,EAAI,EAAGA,EAAIlB,KAAKS,OAAQS,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAInB,KAAKQ,MAAOW,IAAK,CACnC,IAAIW,EAAiBN,EAAegB,KAAKxC,KAApBwB,CAA2BL,EAAGD,GAC/CuB,EAAWnB,EAAcJ,GAAGC,GAAGlB,aAEH,qBAArBsB,EAAWL,GAAGC,KACvBI,EAAWL,GAAGC,GAAK,IAAItB,GAGR,IAAb4C,EAEEX,EAAgB,GAAKA,EAAgB,EAEvCP,EAAWL,GAAGC,GAAGC,SAAS,GAG1BG,EAAWL,GAAGC,GAAGC,SAAS,GAIN,IAAlBU,EAEFP,EAAWL,GAAGC,GAAGC,SAAS,GAG1BG,EAAWL,GAAGC,GAAGC,SAAS,GAQlCpB,KAAKc,mBAAiD,IAA5Bd,KAAKc,mBAA2B,EAAG,EAC7Dd,KAAKiB,sBC7JM,SAASyB,EAASC,EAAGC,EAAGC,GACrC,IAAIC,EAAGC,EAAGC,EAEV,GAAS,IAANJ,EACCE,EAAIC,EAAIC,EAAIH,MACX,CACD,IAAII,EAAU,SAAiBC,EAAGC,EAAGC,GAGjC,OAFGA,EAAI,IAAGA,GAAK,GACZA,EAAI,IAAGA,GAAK,GACZA,EAAI,EAAE,EAAUF,EAAc,GAATC,EAAID,GAASE,EAClCA,EAAI,GAAYD,EAChBC,EAAI,EAAE,EAAUF,GAAKC,EAAID,IAAM,EAAE,EAAIE,GAAK,EACtCF,GAGPC,EAAIN,EAAI,GAAMA,GAAK,EAAID,GAAKC,EAAID,EAAIC,EAAID,EACxCM,EAAI,EAAIL,EAAIM,EAChBL,EAAIG,EAAQC,EAAGC,EAAGR,EAAI,EAAE,GACxBI,EAAIE,EAAQC,EAAGC,EAAGR,GAClBK,EAAIC,EAAQC,EAAGC,EAAGR,EAAI,EAAE,GAG5B,MAAO,CAACzC,KAAKmD,MAAU,IAAJP,GAAU5C,KAAKmD,MAAU,IAAJN,GAAU7C,KAAKmD,MAAU,IAAJL,QCkJhDM,cA/Kb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA1D,OAAAC,EAAA,EAAAD,CAAAE,KAAAsD,IACjBE,EAAA1D,OAAA2D,EAAA,EAAA3D,CAAAE,KAAAF,OAAA4D,EAAA,EAAA5D,CAAAwD,GAAAK,KAAA3D,KAAMuD,KAEDK,KAAO,IAAI/C,EAAK0C,EAAM/C,MAAO+C,EAAM9C,QACxC+C,EAAKI,KAAKC,YACVL,EAAKlD,MAAQ,CACXa,EAAG,EACHD,EAAG,EACHD,WAAYuC,EAAKI,KAAKE,UAExBN,EAAKO,SAAU,EACfP,EAAKQ,eAAgB,EACrBR,EAAKS,WAAa,OAClBT,EAAKU,OAASV,EAAKU,OAAO1B,KAAZ1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KACdA,EAAKY,MAAQZ,EAAKY,MAAM5B,KAAX1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KACbA,EAAKa,UAAYb,EAAKa,UAAU7B,KAAf1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KACjBA,EAAKxC,MAAQwC,EAAKxC,MAAMwB,KAAX1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KACbA,EAAKc,SAAWd,EAAKc,SAAS9B,KAAd1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KAChBA,EAAKe,mBAAqBf,EAAKe,mBAAmB/B,KAAxB1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KAC1BA,EAAKgB,kBAAoBhB,EAAKgB,kBAAkBhC,KAAvB1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KAEzBA,EAAKiB,mBAAqBjB,EAAKiB,mBAAmBjC,KAAxB1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KAC1BA,EAAKkB,qBAAuBlB,EAAKkB,qBAAqBlC,KAA1B1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KAC5BA,EAAKmB,sBAAwBnB,EAAKmB,sBAAsBnC,KAA3B1C,OAAAqE,EAAA,EAAArE,QAAAqE,EAAA,EAAArE,CAAA0D,KAvBZA,mFA2BjBxD,KAAKsE,WACAtE,KAAKgE,eACRY,sBAAsB5E,KAAKkE,4CAK7BlE,KAAK4D,KAAO,IAAI/C,EAAKb,KAAKuD,MAAM/C,MAAOR,KAAKuD,MAAM9C,QAClDT,KAAK4D,KAAKC,YACV7D,KAAKoB,SAAS,CAAEH,WAAYjB,KAAK4D,KAAKE,UAAY,WAChDe,QAAQC,IAAI9E,KAAKM,MAAMW,YACvB2D,sBAAsB5E,KAAKkE,0CAK7BlE,KAAK4D,KAAK5C,QACVhB,KAAKsE,WACLtE,KAAKoB,SAAS,CAAEH,WAAYjB,KAAK4D,KAAKE,WACtC9D,KAAKgE,eAAgB,qCAgBrB,IAZA,IAAIe,EAAW,EACXvE,EAAQR,KAAKuD,MAAM/C,MACnBC,EAAST,KAAKuD,MAAM9C,OAGpBuE,EAAQhF,KAAK4D,KAAKqB,WAIlBC,EADSlF,KAAKmF,KAAKC,OACNC,WAAW,MACxBC,EAAYJ,EAAIK,aAAa,EAAG,EAAG/E,EAAOC,GAErCS,EAAI,EAAGA,EAAIT,EAAQS,IAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAOW,IAAK,CAC9B,IAAMqE,EAAOR,EAAM9D,GAAGC,GAClBqE,EAAKnF,MAAQ0E,IACfA,EAAWS,EAAKnF,OAMtB,IAAK,IAAIa,EAAI,EAAGA,EAAIT,EAAQS,IAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIX,EAAOW,IAAK,CAE9B,IAAIsE,EAA0B,GAAjBvE,EAAIV,EAAQW,GAGnBuE,EAAuB,IADZV,EAAM9D,GAAGC,GAAGlB,aACI,EAAM,IAGjC0F,EAAcX,EAAM9D,GAAGC,GAAGd,MAAQ0E,EAClCa,EAAmC,IAA7B1F,KAAK2F,IAAI,EAAMF,GAErBG,EAAS9F,KAAK+D,QAChBrB,EAASkD,EAAI,IAAK,EAAG,IACrB,CAACF,EAAOA,EAAOA,GAEnBJ,EAAUS,KAAKN,EAAQ,GAAKK,EAAO,GACnCR,EAAUS,KAAKN,EAAQ,GAAKK,EAAO,GACnCR,EAAUS,KAAKN,EAAQ,GAAKK,EAAO,GACnCR,EAAUS,KAAKN,EAAQ,GAAK,IAKhCP,EAAIc,aAAaV,EAAW,EAAG,oCAI/BtF,KAAKsE,WACAtE,KAAKgE,gBACRhE,KAAK4D,KAAKqC,UACVjG,KAAKoB,SAAS,CAAEH,WAAYjB,KAAK4D,KAAKE,WACtCc,sBAAsB5E,KAAKkE,yCAMzBlE,KAAKgE,gBACPhE,KAAKgE,eAAgB,EACrBY,sBAAsB5E,KAAKkE,oDAIZgC,GACjBA,EAAEC,iBACFnG,KAAKoE,kDAGW8B,GAChBA,EAAEC,iBACFnG,KAAKgE,eAAgB,6CAGJkC,GACjBA,EAAEC,iBACFnG,KAAKgE,eAAgB,EACrBhE,KAAKqE,YACLrE,KAAKiE,WAAa,oDAGCiC,GACnBA,EAAEC,iBAE4B,IAA1BnG,KAAKM,MAAMW,aACbjB,KAAK+D,SAAW/D,KAAK+D,QAEjB/D,KAAKgE,eACPhE,KAAKsE,0DAKW4B,GACpBA,EAAEC,iBACEnG,KAAKgE,eACPhE,KAAKoE,QACLpE,KAAKiE,WAAa,UAElBjE,KAAKgE,eAAgB,EACrBhE,KAAKiE,WAAa,yCAKpB,OACEmC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aAAaC,IAAI,QACvBJ,EAAAC,EAAAC,cAAA,UAAQE,IAAI,SAAShG,MAAOR,KAAKuD,MAAM/C,MAAOC,OAAQT,KAAKuD,MAAM9C,SACjE2F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBAAkBtG,KAAKM,MAAMW,aAE/BmF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,mBACNH,EAAAC,EAAAC,cAAA,UAAQG,QAASzG,KAAK2E,uBAAuByB,EAAAC,EAAAC,cAAA,YAAQtG,KAAKiE,aAC1DmC,EAAAC,EAAAC,cAAA,UAAQG,QAASzG,KAAKyE,oBAAqB2B,EAAAC,EAAAC,cAAA,sBAC3CF,EAAAC,EAAAC,cAAA,UAAQI,SAAoC,IAA1B1G,KAAKM,MAAMW,WAAkBwF,QAASzG,KAAK0E,sBAAsB0B,EAAAC,EAAAC,cAAA,wCAvKpEK,aCqBVC,cAnBb,SAAAA,EAAYrD,GAAO,IAAAC,EAAA,OAAA1D,OAAAC,EAAA,EAAAD,CAAAE,KAAA4G,IACjBpD,EAAA1D,OAAA2D,EAAA,EAAA3D,CAAAE,KAAAF,OAAA4D,EAAA,EAAA5D,CAAA8G,GAAAjD,KAAA3D,KAAMuD,KACDjD,MAAQ,CACXuG,KAAM,IACNC,KAAM,KAJStD,wEASjB,OACE4C,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAACU,EAAD,CAAYxG,MAAOR,KAAKM,MAAMuG,KAAMpG,OAAQT,KAAKM,MAAMwG,eAb7CH,aCOEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bb7bd0b9.chunk.js","sourcesContent":["class Cell {\n  constructor() {\n    this.currentState = Math.floor(Math.random() * 2);\n    this.total = 0;\n  }\n  \n  setState(state) {\n    this.currentState = state;\n    this.total += state;\n  }\n}\n\nexport default Cell;","import Cell from './cell'\n\nfunction Array2D(width, height) {\n  let arr = new Array(height);\n\n  for (let i = 0; i < height; i++) {\n    arr[i] = new Array(width);\n  }\n\n  return arr;\n}\n\nclass Grid  {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.currentBufferIndex = 0;\n    this.buffer = [\n      Array2D(width, height),\n      Array2D(width, height)\n    ];\n    this.clear();\n    this.generation = 0;\n  }\n\n  getCells() {\n    return this.buffer[this.currentBufferIndex];\n  }\n\n  getGen() {\n    return this.generation;\n  }\n\n  clear() {\n    this.generation = 0;\n    let buffer = this.buffer[this.currentBufferIndex];\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        buffer[y][x] = new Cell();\n        buffer[y][x].setState(0); \n      }\n    }\n  }\n\n  buildGrid() {\n    let buffer = this.buffer[this.currentBufferIndex];\n\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        buffer[y][x] = new Cell(); // Random 0 or 1\n      }\n    }\n  }\n\n  nextGen() {\n    let backBufferIndex = this.currentBufferIndex === 0 ? 1: 0;\n    let currentBuffer = this.buffer[this.currentBufferIndex];\n    let backBuffer = this.buffer[backBufferIndex];\n\n    /**\n     * Count the neighbors of a cell\n     */\n    function countNeighbors(x, y, options={border:'zero'}) {\n      let neighborCount = 0;\n\n      if (options.border === 'wrap') {\n        let north = y - 1;\n        let south = y + 1;\n        let west = x - 1;\n        let east = x + 1;\n\n        // Wrap around the edges\n\n        if (north < 0) {\n          north = this.height - 1;\n        }\n\n       if (south === this.height) {\n          south = 0;\n        }\n\n        if (west < 0) {\n          west = this.width - 1;\n        }\n\n        if (east === this.width) {\n          east = 0;\n        }\n\n        neighborCount =\n          currentBuffer[north][west].currentState +\n          currentBuffer[north][x].currentState +\n          currentBuffer[north][east].currentState +\n          currentBuffer[y][west].currentState +\n          currentBuffer[y][east].currentState +\n          currentBuffer[south][west].currentState +\n          currentBuffer[south][x].currentState +\n          currentBuffer[south][east].currentState;\n\n      } else if (options.border === 'zero') {\n        // Treat out of bounds as zero\n        for (let yOffset = -1; yOffset <= 1; yOffset++) {\n          let yPos = y + yOffset;\n\n          if (yPos < 0 || yPos === this.height) {\n            // Out of bounds\n            continue;\n          }\n\n          for (let xOffset = -1; xOffset <= 1; xOffset++) {\n            let xPos = x + xOffset;\n\n            if (xPos < 0 || xPos === this.width) {\n              // Out of bounds\n              continue;\n            }\n\n            // Don't count center element\n            if (xOffset === 0 && yOffset === 0) {\n              continue;\n            }\n\n            neighborCount += currentBuffer[yPos][xPos].currentState;\n          }\n        }\n\n      } else {\n        throw new Error('unknown border option' + options.border);\n      }\n\n      return neighborCount;\n    } // countNeighbors()\n\n    // Loop through and decide if the next generation is alive or dead\n    // for each cell processed.\n    for (let y = 0; y < this.height; y++) {\n      for (let x = 0; x < this.width; x++) {\n        let neighborCount = (countNeighbors.bind(this))(x, y);\n        let thisCell = currentBuffer[y][x].currentState;\n\n        if (typeof backBuffer[y][x] === 'undefined') {\n          backBuffer[y][x] = new Cell();\n        }\n\n        if (thisCell === 1) {\n          // We're alive. Let's check if we're dying.\n          if (neighborCount < 2 || neighborCount > 3) {\n            // Wake up. Time to die.\n            backBuffer[y][x].setState(0)\n          } else {\n          // We're still alive!\n            backBuffer[y][x].setState(1)\n          }\n        } else {\n          // We're dead. Let's see if we come to life.\n          if (neighborCount === 3) {\n          // A rebirth!\n            backBuffer[y][x].setState(1)\n          } else {\n            // We're still dead\n            backBuffer[y][x].setState(0)\n          } \n        }\n      }\n    }\n\n    // Now the backBuffer is populated with the next generation life\n    // data. So we declare that to be the new current buffer.\n    this.currentBufferIndex = this.currentBufferIndex === 0 ? 1: 0;\n    this.generation++;\n  }\n}\n\nexport default Grid;","/**\n * Converts an HSL color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n * Assumes h, s, and l are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   {number}  h       The hue\n * @param   {number}  s       The saturation\n * @param   {number}  l       The lightness\n * @return  {Array}           The RGB representation\n */\n\nexport default function hslToRgb(h, s, l){\n  var r, g, b;\n\n  if(s === 0){\n      r = g = b = l; // achromatic\n  }else{\n      var hue2rgb = function hue2rgb(p, q, t){\n          if(t < 0) t += 1;\n          if(t > 1) t -= 1;\n          if(t < 1/6) return p + (q - p) * 6 * t;\n          if(t < 1/2) return q;\n          if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n          return p;\n      }\n\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = hue2rgb(p, q, h + 1/3);\n      g = hue2rgb(p, q, h);\n      b = hue2rgb(p, q, h - 1/3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n} ","import React, {Component} from 'react';\nimport Grid from './grid'\nimport hslToRgb from '../utils/hslToRgb'\n\nclass GridCanvas extends Component {\n  constructor(props) {\n    super(props);\n\n    this.grid = new Grid(props.width, props.height);\n    this.grid.buildGrid();\n    this.state = {\n      x: 0,\n      y: 0,\n      generation: this.grid.getGen(),\n    }\n    this.heatmap = false;\n    this.stopRequested = true;\n    this.buttonText = \"Play\"\n    this.update = this.update.bind(this);\n    this.start = this.start.bind(this);\n    this.startOver = this.startOver.bind(this);\n    this.clear = this.clear.bind(this);\n    this.drawGrid = this.drawGrid.bind(this);\n    this.startButtonHandler = this.startButtonHandler.bind(this);\n    this.stopButtonHandler = this.stopButtonHandler.bind(this);\n    // this.clearButtonHandler = this.clearButtonHandler.bind(this);\n    this.resetButtonHandler = this.resetButtonHandler.bind(this);\n    this.heatmapButtonHandler = this.heatmapButtonHandler.bind(this);\n    this.playbackButtonHandler = this.playbackButtonHandler.bind(this)\n  }\n  \n  componentDidMount() {\n    this.drawGrid();\n    if (!this.stopRequested) {\n      requestAnimationFrame(this.update)\n    }\n  }\n\n  startOver() {\n    this.grid = new Grid(this.props.width, this.props.height);\n    this.grid.buildGrid();\n    this.setState({ generation: this.grid.getGen() }, function(){\n      console.log(this.state.generation)\n      requestAnimationFrame(this.update);\n    });\n  }\n\n  clear() {\n    this.grid.clear();\n    this.drawGrid();\n    this.setState({ generation: this.grid.getGen() });\n    this.stopRequested = true;\n  }\n\n  drawGrid() {\n    let maxTotal = 0;\n    let width = this.props.width;\n    let height = this.props.height;\n\n    // Update life and get cells\n    let cells = this.grid.getCells();\n\n    // Get canvas framebuffer, a packed RGBA array\n    let canvas = this.refs.canvas;\n    let ctx = canvas.getContext('2d');\n    let imageData = ctx.getImageData(0, 0, width, height);\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const cell = cells[y][x];\n        if (cell.total > maxTotal) {\n          maxTotal = cell.total;\n        }\n      }\n    }\n   \n    // Convert the cell values into white or black for the canvas\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        // 4 array entries per pixel, Red, Green, Blue, and Alpha:\n        let index = (y * width + x) * 4;\n\n        let lifeStatus = cells[y][x].currentState;\n        const color = lifeStatus === 1 ? 0x00: 0xff;\n        \n        // assign hue value to cell total/board total relationship\n        const normalized = (cells[y][x].total / maxTotal);\n        const hue = Math.abs(1.0 - normalized) * 240;\n        \n        const colors = this.heatmap \n          ? hslToRgb(hue/360, 1, 0.5) // convert to rgb value\n          : [color, color, color]\n        \n        imageData.data[index + 0] = colors[0]; // Red channel\n        imageData.data[index + 1] = colors[1]; // Green channel\n        imageData.data[index + 2] = colors[2]; // Blue channel\n        imageData.data[index + 3] = 0xff;  // Alpha channel, 0xff = opaque\n      }\n    }\n\n    // Put the new image data back on the canvas\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  update() {\n    this.drawGrid();\n    if (!this.stopRequested) {\n      this.grid.nextGen();\n      this.setState({ generation: this.grid.getGen() })\n      requestAnimationFrame(this.update);\n    }\n  }\n\n  start() {\n    // when running, prevent 'start' from requesting new frame performance\n    if (this.stopRequested) {\n      this.stopRequested = false;\n      requestAnimationFrame(this.update);\n    }\n  }\n\n  startButtonHandler(e) {\n    e.preventDefault();\n    this.start();\n  }\n\n  stopButtonHandler(e) {\n    e.preventDefault();\n    this.stopRequested = true;\n  }\n\n  resetButtonHandler(e) {\n    e.preventDefault();\n    this.stopRequested = true;\n    this.startOver(); \n    this.buttonText = \"Play\"\n  }\n\n  heatmapButtonHandler(e) {\n    e.preventDefault();\n    // do nothing if starting from scratch\n    if (this.state.generation !== 0) {\n      this.heatmap = !this.heatmap;\n      // toggle heatmap when paused\n      if (this.stopRequested) {\n        this.drawGrid();\n      }\n    }\n  }\n\n  playbackButtonHandler(e) {\n    e.preventDefault();\n    if (this.stopRequested) {\n      this.start()\n      this.buttonText = \"Pause\"\n    } else {\n      this.stopRequested = true\n      this.buttonText = \"Play\"\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"gridCanvas\" ref=\"elem\">\n        <canvas ref=\"canvas\" width={this.props.width} height={this.props.height}/> \n        <div>\n          <h3>Generation: { this.state.generation }</h3>\n        </div>\n        <div id=\"buttonContainer\">\n          <button onClick={this.playbackButtonHandler}><span>{ this.buttonText }</span></button>\n          <button onClick={this.resetButtonHandler }><span>Reset</span></button>\n          <button disabled={this.state.generation === 0} onClick={this.heatmapButtonHandler}><span>Toggle Heatmap</span></button>\n        </div>\n\n        \n      </div>\n    )\n  }\n}\n\nexport default GridCanvas;","import React, { Component } from 'react';\n\nimport './App.css';\nimport GridCanvas from './components/gridCanvas'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      COLS: 500,\n      ROWS: 500,\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Conway's Game of Life</h1>\n        <GridCanvas width={this.state.COLS} height={this.state.ROWS}/>\n        {/* <h4>About this Game</h4> */}\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}